{"version":3,"sources":["components/userInput/input.js","components/userInput/index.js","view/homepage.js","App.js","reportWebVitals.js","index.js"],"names":["AlphaInput","props","arrangedAlpha","setArrangedAlpha","reset","value","setValue","setIsCompleted","isCompleted","alphaInput","setIsFirstEvent","isfirstEvent","className","autocomplete","ref","maxLength","type","disabled","onChange","event","target","length","handleTimer","Date","now","lastChar","toUpperCase","filter","isValid","checkInput","onPaste","preventDefault","onPasteHander","UserInput","alphabets","useState","runningTime","setRunningTime","state","setState","timer","setTimer","textInput","setTextInput","useRef","arrange","isReversed","reversed","split","reverse","Array","regular","useEffect","foucsInput","getCharColor","status","current","focus","clearInterval","console","log","map","character","index","startTime","setInterval","onClick","Homepage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ea4f4cf.chunk.js","sourcesContent":["import \"./inputStyle.scss\";\n\nexport default function AlphaInput(props) {\n  const {\n    arrangedAlpha,\n    setArrangedAlpha,\n    reset,\n    value,\n    setValue,\n    setIsCompleted,\n    isCompleted,\n    alphaInput,\n    setIsFirstEvent,\n    isfirstEvent,\n  } = props;\n\n  const onPasteHander = (event) => {\n    event.preventDefault();\n    return;\n  };\n\n  const checkInput = (event) => {\n    if (event.target.value.length > 26) {\n      return;\n    }\n    setValue(event.target.value);\n    if (isfirstEvent) {\n      setIsFirstEvent(false);\n      props.handleTimer(Date.now());\n    }\n    const lastChar = event.target.value.length - 1;\n    if (event.target.value) {\n      if (\n        arrangedAlpha[0][lastChar] ===\n        event.target.value[lastChar].toUpperCase()\n      ) {\n        arrangedAlpha[1][lastChar] = true;\n        setArrangedAlpha([...arrangedAlpha]);\n      } else {\n        arrangedAlpha[1][lastChar] = false;\n        setArrangedAlpha([...arrangedAlpha]);\n      }\n\n      if (lastChar === 25) {\n        const invalid = arrangedAlpha[1].filter((isValid) => !isValid);\n        if (!invalid.length) {\n          setIsCompleted(true);\n          props.handleTimer(Date.now());\n        }\n      }\n    } else {\n      reset();\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <input\n        autocomplete=\"off\"\n        ref={alphaInput}\n        value={value}\n        maxLength=\"26\"\n        className=\"input\"\n        type=\"text\"\n        disabled={isCompleted}\n        onChange={(event) => checkInput(event)}\n        onPaste={(event) => onPasteHander(event)}\n      ></input>\n    </div>\n  );\n}\n","import \"./inputStyle.scss\";\nimport AlphaInput from \"./input\";\nimport { useState, useRef, useEffect } from \"react\";\nfunction UserInput() {\n  const alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const [runningTime, setRunningTime] = useState(0);\n  const [state, setState] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [textInput, setTextInput] = useState(\"\");\n  const [isCompleted, setIsCompleted] = useState(false);\n  const alphaInput = useRef(null);\n  const [isfirstEvent, setIsFirstEvent] = useState(true);\n\n  const arrange = (isReversed) => {\n    if (isReversed) {\n      const reversed = alphabets.split(\"\").reverse();\n      return [reversed, new Array(reversed.length)];\n    }\n    const regular = alphabets.split(\"\");\n    return [regular, new Array(regular.length)];\n  };\n\n  let [arrangedAlpha, setArrangedAlpha] = useState(arrange());\n  /**\n   * start and stop timer\n   * @param {start time of first key press} startTime\n   */\n  const handleTimer = (startTime) => {\n    if (state) {\n      clearInterval(timer);\n      setState(false);\n    } else {\n      const timer = setInterval(() => {\n        setRunningTime(Date.now() - startTime);\n        console.log(`timer`, timer);\n      });\n      setTimer(timer);\n      setState(true);\n    }\n  };\n\n  useEffect(() => {\n    foucsInput();\n  }, []);\n\n  const getCharColor = (status) => {\n    switch (status) {\n      case true:\n        return \"valid\";\n      case false:\n        return \"invalid\";\n      default:\n        return \"\";\n    }\n  };\n\n  const foucsInput = () => {\n    alphaInput.current.focus();\n  };\n\n  const resetTimer = () => {\n    clearInterval(timer);\n    setTimer(0);\n    setRunningTime(0);\n    setState(false);\n    setIsFirstEvent(true);\n    console.log(`asd`, timer, state, runningTime);\n  };\n\n  /**\n   * set timer\n   */\n  const reset = () => {\n    resetTimer();\n    setArrangedAlpha(arrange());\n    setTextInput(\"\");\n    setIsCompleted(false);\n    foucsInput();\n  };\n\n  return (\n    <>\n      <div className=\"d-flex justify-center flex-column\">\n        <h1 className=\"d-flex justify-center uppercase\">Type to start</h1>\n        <div className=\"d-flex justify-center\">\n          <h2 className=\"width\">{runningTime / 1000}'s</h2>\n        </div>\n      </div>\n      <div className=\"d-flex justify-center flex-wrap\">\n        {arrangedAlpha[0].map((character, index) => (\n          <span\n            className={`char ${getCharColor(arrangedAlpha[1][index])}`}\n            key={`apha${index}`}\n          >\n            {character}\n            {arrangedAlpha[1][index]}\n          </span>\n        ))}\n      </div>\n      <AlphaInput\n        isCompleted={isCompleted}\n        setIsCompleted={setIsCompleted}\n        value={textInput}\n        setValue={setTextInput}\n        handleTimer={handleTimer}\n        reset={reset}\n        arrangedAlpha={arrangedAlpha}\n        setArrangedAlpha={setArrangedAlpha}\n        alphaInput={alphaInput}\n        isfirstEvent={isfirstEvent}\n        setIsFirstEvent={setIsFirstEvent}\n      ></AlphaInput>\n      <div className=\"d-flex justify-center mt-3\">\n        <button onClick={() => reset()}>Reset</button>\n      </div>\n\n      <div className=\"how\">\n        <div className=\"box\">\n          <h4>How to play:</h4>\n          <div>\n            You have to type alphabet in sequence and measure the time how fast\n            you can type.\n          </div>\n          <div>Compete with you and with friends and Enjoy :-)</div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default UserInput;\n","import UserInput from \"../components/userInput\";\nexport default function Homepage() {\n  return <UserInput></UserInput>;\n}\n","import \"./styles/default.scss\";\nimport Homepage from \"./view/homepage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage></Homepage>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}