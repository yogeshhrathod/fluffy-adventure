{"version":3,"sources":["components/userInput/input.js","components/userInput/index.js","view/homepage.js","App.js","reportWebVitals.js","index.js"],"names":["AlphaInput","props","arrangedAlpha","setArrangedAlpha","reset","value","setValue","setIsCompleted","isCompleted","alphaInput","setIsFirstEvent","isfirstEvent","className","ref","maxLength","type","disabled","onChange","event","target","handleTimer","Date","now","lastChar","length","toUpperCase","filter","isValid","checkInput","onPaste","preventDefault","onPasteHander","UserInput","alphabets","useState","runningTime","setRunningTime","state","setState","timer","setTimer","textInput","setTextInput","useRef","arrange","isReversed","reversed","split","reverse","Array","regular","useEffect","foucsInput","current","focus","clearInterval","console","log","map","character","index","startTime","setInterval","onClick","Homepage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b899ac72.chunk.js","sourcesContent":["import \"./inputStyle.scss\";\r\n\r\nexport default function AlphaInput(props) {\r\n  const {\r\n    arrangedAlpha,\r\n    setArrangedAlpha,\r\n    reset,\r\n    value,\r\n    setValue,\r\n    setIsCompleted,\r\n    isCompleted,\r\n    alphaInput,\r\n    setIsFirstEvent,\r\n    isfirstEvent,\r\n  } = props;\r\n\r\n  const onPasteHander = (event) => {\r\n    event.preventDefault();\r\n    return;\r\n  };\r\n\r\n  const checkInput = (event) => {\r\n    setValue(event.target.value);\r\n    if (isfirstEvent) {\r\n      setIsFirstEvent(false);\r\n      props.handleTimer(Date.now());\r\n    }\r\n    const lastChar = event.target.value.length - 1;\r\n    if (event.target.value) {\r\n      if (\r\n        arrangedAlpha[0][lastChar] ===\r\n        event.target.value[lastChar].toUpperCase()\r\n      ) {\r\n        arrangedAlpha[1][lastChar] = true;\r\n        setArrangedAlpha([...arrangedAlpha]);\r\n      } else {\r\n        arrangedAlpha[1][lastChar] = false;\r\n        setArrangedAlpha([...arrangedAlpha]);\r\n      }\r\n\r\n      if (lastChar === 25) {\r\n        const invalid = arrangedAlpha[1].filter((isValid) => !isValid);\r\n        if (!invalid.length) {\r\n          setIsCompleted(true);\r\n          props.handleTimer(Date.now());\r\n        }\r\n      }\r\n    } else {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <input\r\n        ref={alphaInput}\r\n        value={value}\r\n        maxLength=\"26\"\r\n        className=\"input\"\r\n        type=\"text\"\r\n        disabled={isCompleted}\r\n        onChange={(event) => checkInput(event)}\r\n        onPaste={(event) => onPasteHander(event)}\r\n      ></input>\r\n    </div>\r\n  );\r\n}\r\n","import \"./inputStyle.scss\";\r\nimport AlphaInput from \"./input\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nfunction UserInput() {\r\n  const alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n  const [runningTime, setRunningTime] = useState(0);\r\n  const [state, setState] = useState(false);\r\n  const [timer, setTimer] = useState(0);\r\n  const [textInput, setTextInput] = useState(\"\");\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  const alphaInput = useRef(null);\r\n  const [isfirstEvent, setIsFirstEvent] = useState(true);\r\n\r\n  const arrange = (isReversed) => {\r\n    if (isReversed) {\r\n      const reversed = alphabets.split(\"\").reverse();\r\n      return [reversed, new Array(reversed.length)];\r\n    }\r\n    const regular = alphabets.split(\"\");\r\n    return [regular, new Array(regular.length)];\r\n  };\r\n\r\n  let [arrangedAlpha, setArrangedAlpha] = useState(arrange());\r\n  /**\r\n   * start and stop timer\r\n   * @param {start time of first key press} startTime\r\n   */\r\n  const handleTimer = (startTime) => {\r\n    if (state) {\r\n      clearInterval(timer);\r\n      setState(false);\r\n    } else {\r\n      const timer = setInterval(() => {\r\n        setRunningTime(Date.now() - startTime);\r\n        console.log(`timer`, timer);\r\n      });\r\n      setTimer(timer);\r\n      setState(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    foucsInput();\r\n  }, []);\r\n\r\n  const foucsInput = () => {\r\n    alphaInput.current.focus();\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    clearInterval(timer);\r\n    setTimer(0);\r\n    setRunningTime(0);\r\n    setState(false);\r\n    setIsFirstEvent(true);\r\n    console.log(`asd`, timer, state, runningTime);\r\n  };\r\n\r\n  /**\r\n   * set timer\r\n   */\r\n  const reset = () => {\r\n    resetTimer();\r\n    setArrangedAlpha(arrange());\r\n    setTextInput(\"\");\r\n    setIsCompleted(false);\r\n    foucsInput();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex justify-center flex-column\">\r\n        <h1 className=\"d-flex justify-center uppercase\">Type to start</h1>\r\n        <div className=\"d-flex justify-center\">\r\n          <h2 className=\"width\">{runningTime / 1000}'s</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-center flex-wrap\">\r\n        {arrangedAlpha[0].map((character, index) => (\r\n          <span\r\n            className={`char ${\r\n              arrangedAlpha[1][index] === false ? \"invalid\" : \"\"\r\n            }`}\r\n            key={`apha${index}`}\r\n          >\r\n            {character}\r\n            {arrangedAlpha[1][index]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n      <AlphaInput\r\n        isCompleted={isCompleted}\r\n        setIsCompleted={setIsCompleted}\r\n        value={textInput}\r\n        setValue={setTextInput}\r\n        handleTimer={handleTimer}\r\n        reset={reset}\r\n        arrangedAlpha={arrangedAlpha}\r\n        setArrangedAlpha={setArrangedAlpha}\r\n        alphaInput={alphaInput}\r\n        isfirstEvent={isfirstEvent}\r\n        setIsFirstEvent={setIsFirstEvent}\r\n      ></AlphaInput>\r\n      <div className=\"d-flex justify-center mt-3\">\r\n        <button onClick={() => reset()}>Reset</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserInput;\r\n","import UserInput from \"../components/userInput\";\r\nexport default function Homepage() {\r\n  return <UserInput></UserInput>;\r\n}\r\n","import \"./styles/default.scss\";\nimport Homepage from \"./view/homepage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage></Homepage>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}